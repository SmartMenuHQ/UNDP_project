<% content_for :title, "Edit Assessment - #{@assessment.title}" %>

<div class="min-h-screen bg-gray-50 py-8">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">

    <!-- Header -->
    <div class="bg-white shadow rounded-lg mb-6">
      <div class="p-6">
        <div class="flex items-center justify-between">
          <div>
            <h1 class="text-2xl font-bold text-gray-900"><%= @assessment.title %></h1>
            <p class="text-gray-600 mt-1">
              <%= @assessment.description.present? ? @assessment.description : "No description provided" %>
            </p>
            <div class="mt-3">
              <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                <%= @assessment.total_sections %> Sections
              </span>
              <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 ml-2">
                <%= @assessment.total_questions %> Questions
              </span>
            </div>
          </div>
          <div class="flex items-center space-x-3">
            <%= link_to "Preview", preview_assessment_path(@assessment),
                class: "bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-md text-sm font-medium",
                target: "_blank" %>
            <%= link_to "Back to List", assessments_path,
                class: "bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-md text-sm font-medium" %>
          </div>
        </div>
      </div>
    </div>

    <!-- Assessment Sections -->
    <div class="space-y-6">
      <% if @sections.any? %>
        <% @sections.each_with_index do |section, index| %>
          <div class="bg-white shadow rounded-lg">
            <div class="p-6">
              <!-- Section Header -->
              <div class="flex items-center justify-between mb-4">
                <div class="flex items-center space-x-3">
                  <div class="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                    <span class="text-sm font-medium text-blue-600"><%= index + 1 %></span>
                  </div>
                  <div>
                    <h3 class="text-lg font-medium text-gray-900"><%= section.display_name %></h3>
                    <p class="text-sm text-gray-500"><%= section.total_questions %> questions</p>
                  </div>
                </div>
                <div class="flex items-center space-x-2">
                  <!-- Add Question Dropdown -->
                  <div class="relative inline-block text-left">
                    <button type="button" onclick="toggleDropdown('dropdown-<%= section.id %>')"
                            class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                      Add Question
                      <svg class="ml-2 -mr-1 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                      </svg>
                    </button>
                    <div id="dropdown-<%= section.id %>" class="hidden absolute right-0 z-10 mt-2 w-56 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5">
                      <div class="py-1">
                        <% [
                          ['Multiple Choice', 'MultipleChoice', 'blue'],
                          ['Radio Button', 'Radio', 'green'],
                          ['Text Input', 'RichText', 'yellow'],
                          ['Date Picker', 'DateType', 'purple'],
                          ['Number Range', 'RangeType', 'pink'],
                          ['True/False', 'BooleanType', 'indigo'],
                          ['File Upload', 'FileUpload', 'red']
                        ].each do |name, type, color| %>
                          <button onclick="addQuestion(<%= section.id %>, '<%= type %>')"
                                  class="group flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 w-full text-left">
                            <div class="w-3 h-3 bg-<%= color %>-400 rounded-full mr-3"></div>
                            <%= name %>
                          </button>
                        <% end %>
                      </div>
                    </div>
                  </div>
                  <button onclick="removeSection(<%= section.id %>)"
                          class="text-red-600 hover:text-red-800 p-2">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                    </svg>
                  </button>
                </div>
              </div>

              <!-- Questions List -->
              <div class="space-y-3">
                <% section.assessment_questions.ordered.each do |question| %>
                  <div class="bg-gray-50 rounded-lg p-4 border border-gray-200">
                    <div class="flex items-start justify-between">
                      <div class="flex items-start space-x-3 flex-1">
                        <div class="w-6 h-6 bg-<%= question.question_type_color %>-100 rounded-full flex items-center justify-center">
                          <span class="text-xs font-medium text-<%= question.question_type_color %>-600">
                            <%= question.order %>
                          </span>
                        </div>
                        <div class="flex-1">
                          <div class="flex items-center space-x-2 mb-1">
                            <h4 class="text-sm font-medium text-gray-900"><%= question.display_text %></h4>
                            <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-<%= question.question_type_color %>-100 text-<%= question.question_type_color %>-800">
                              <%= question.question_type_name %>
                            </span>
                            <% if question.is_required? %>
                              <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                Required
                              </span>
                            <% end %>
                          </div>
                                                    <% if question.type.in?(['AssessmentQuestions::MultipleChoice', 'AssessmentQuestions::Radio', 'AssessmentQuestions::BooleanType']) && question.respond_to?(:option) %>
                            <div class="text-xs text-gray-500 mb-2">
                              <%= question.option.count %> options available
                            </div>
                            <!-- Options Management -->
                            <div class="space-y-2">
                              <div class="flex items-center justify-between">
                                <span class="text-xs font-medium text-gray-700">Options:</span>
                                <button onclick="addOption(<%= question.id %>)"
                                        class="text-xs bg-green-100 hover:bg-green-200 text-green-700 px-2 py-1 rounded">
                                  <svg class="w-3 h-3 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                                  </svg>
                                  Add Option
                                </button>
                              </div>
                              <div id="options-list-<%= question.id %>" class="space-y-1">
                                <% question.option.ordered.each do |option| %>
                                  <div class="flex items-center space-x-2 bg-white p-2 rounded border" data-option-id="<%= option.id %>">
                                    <span class="text-xs text-gray-500 w-4"><%= option.order %></span>
                                    <input type="text"
                                           value="<%= option.text %>"
                                           class="flex-1 text-xs border-0 bg-transparent focus:ring-0 p-0"
                                           onchange="updateOption(<%= option.id %>, this.value)"
                                           placeholder="Option text">
                                    <button onclick="removeOption(<%= option.id %>)"
                                            class="text-red-500 hover:text-red-700 p-1">
                                      <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                      </svg>
                                    </button>
                                  </div>
                                <% end %>
                              </div>
                            </div>
                          <% else %>
                            <div class="text-xs text-gray-500">
                              No options required for this question type
                            </div>
                          <% end %>
                        </div>
                      </div>
                      <div class="flex items-center space-x-2">
                        <button onclick="editQuestion(<%= question.id %>)"
                                class="text-blue-600 hover:text-blue-800 p-1">
                          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                          </svg>
                        </button>
                        <button onclick="removeQuestion(<%= question.id %>)"
                                class="text-red-600 hover:text-red-800 p-1">
                          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                          </svg>
                        </button>
                      </div>
                    </div>
                  </div>
                <% end %>

                <% if section.assessment_questions.empty? %>
                  <div class="text-center py-8 text-gray-500">
                    <svg class="w-12 h-12 mx-auto mb-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    <p>No questions yet. Add your first question using the dropdown above.</p>
                  </div>
                <% end %>
              </div>
            </div>
          </div>
        <% end %>
      <% else %>
        <div class="bg-white shadow rounded-lg p-12 text-center">
          <svg class="w-16 h-16 mx-auto mb-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
          </svg>
          <h3 class="text-lg font-medium text-gray-900 mb-2">No sections yet</h3>
          <p class="text-gray-500 mb-4">Start building your assessment by adding your first section.</p>
          <button onclick="addSection()"
                  class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md text-sm font-medium">
            Add First Section
          </button>
        </div>
      <% end %>

      <!-- Add Section Button -->
      <div class="text-center">
        <button onclick="addSection()"
                class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-md text-sm font-medium">
          <svg class="w-4 h-4 mr-2 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
          </svg>
          Add New Section
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Simple Edit Question Modal -->
<div id="editModal" class="hidden fixed inset-0 z-50 overflow-y-auto">
  <div class="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center">
    <div class="fixed inset-0 bg-gray-500 bg-opacity-75" onclick="closeEditModal()"></div>
    <div class="bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:w-full sm:max-w-lg">
      <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-lg leading-6 font-medium text-gray-900">Edit Question</h3>
          <button onclick="closeEditModal()" class="text-gray-400 hover:text-gray-600">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>

        <div id="editContent">
          <div class="space-y-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Question Text</label>
              <textarea id="editQuestionText" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"></textarea>
            </div>
            <div class="flex items-center">
              <input id="editQuestionRequired" type="checkbox" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded">
              <label for="editQuestionRequired" class="ml-2 block text-sm text-gray-900">Required question</label>
            </div>
          </div>
        </div>

        <div class="mt-6 flex justify-end space-x-3">
          <button onclick="closeEditModal()" type="button" class="bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50">
            Cancel
          </button>
          <button onclick="saveQuestion()" type="button" class="bg-blue-600 border border-transparent rounded-md shadow-sm py-2 px-4 text-sm font-medium text-white hover:bg-blue-700">
            Save Changes
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
// Global variables
let currentQuestionId = null;

// Toggle dropdown
function toggleDropdown(dropdownId) {
  const dropdown = document.getElementById(dropdownId);
  const allDropdowns = document.querySelectorAll('[id^="dropdown-"]');

  // Close all other dropdowns
  allDropdowns.forEach(d => {
    if (d.id !== dropdownId) {
      d.classList.add('hidden');
    }
  });

  // Toggle current dropdown
  dropdown.classList.toggle('hidden');
}

// Close dropdowns when clicking outside
document.addEventListener('click', function(event) {
  const isDropdownButton = event.target.closest('[onclick*="toggleDropdown"]');
  if (!isDropdownButton) {
    document.querySelectorAll('[id^="dropdown-"]').forEach(d => {
      d.classList.add('hidden');
    });
  }
});

// Add new section
function addSection() {
  fetch('/assessments/<%= @assessment.id %>/add_section', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': '<%= form_authenticity_token %>'
    }
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      location.reload();
    } else {
      alert('Error adding section: ' + (data.errors ? data.errors.join(', ') : 'Unknown error'));
    }
  })
  .catch(error => {
    alert('Error adding section: ' + error.message);
  });
}

// Remove section
function removeSection(sectionId) {
  if (confirm('Are you sure you want to remove this section and all its questions?')) {
    fetch('/assessments/<%= @assessment.id %>/remove_section', {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': '<%= form_authenticity_token %>'
      },
      body: JSON.stringify({ section_id: sectionId })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        location.reload();
      } else {
        alert('Error removing section');
      }
    });
  }
}

// Add new question
function addQuestion(sectionId, questionType) {
  // Close dropdown
  document.getElementById('dropdown-' + sectionId).classList.add('hidden');

  fetch('/assessments/<%= @assessment.id %>/add_question', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': '<%= form_authenticity_token %>'
    },
    body: JSON.stringify({
      section_id: sectionId,
      question_type: questionType
    })
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      location.reload();
    } else {
      alert('Error adding question: ' + (data.errors ? data.errors.join(', ') : 'Unknown error'));
    }
  })
  .catch(error => {
    alert('Error adding question: ' + error.message);
  });
}

// Remove question
function removeQuestion(questionId) {
  if (confirm('Are you sure you want to remove this question?')) {
    fetch('/assessments/<%= @assessment.id %>/remove_question', {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': '<%= form_authenticity_token %>'
      },
      body: JSON.stringify({ question_id: questionId })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        location.reload();
      } else {
        alert('Error removing question');
      }
    });
  }
}

// Edit question (simplified)
function editQuestion(questionId) {
  currentQuestionId = questionId;

  // For now, just show a simple prompt
  const newText = prompt('Enter new question text:');
  if (newText && newText.trim()) {
    fetch('/assessments/<%= @assessment.id %>/update_question', {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': '<%= form_authenticity_token %>'
      },
      body: JSON.stringify({
        question_id: questionId,
        question: { text: newText.trim() }
      })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        location.reload();
      } else {
        alert('Error updating question: ' + (data.errors ? data.errors.join(', ') : 'Unknown error'));
      }
    })
    .catch(error => {
      alert('Error updating question: ' + error.message);
    });
  }
}

// Modal functions (for future enhanced editing)
function openEditModal(questionId) {
  currentQuestionId = questionId;
  document.getElementById('editModal').classList.remove('hidden');
}

function closeEditModal() {
  document.getElementById('editModal').classList.add('hidden');
  currentQuestionId = null;
}

function saveQuestion() {
  if (!currentQuestionId) return;

  const text = document.getElementById('editQuestionText').value;
  const isRequired = document.getElementById('editQuestionRequired').checked;

  fetch('/assessments/<%= @assessment.id %>/update_question', {
    method: 'PATCH',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': '<%= form_authenticity_token %>'
    },
    body: JSON.stringify({
      question_id: currentQuestionId,
      question: {
        text: text,
        is_required: isRequired
      }
    })
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      closeEditModal();
      location.reload();
    } else {
      alert('Error updating question: ' + (data.errors ? data.errors.join(', ') : 'Unknown error'));
    }
  })
  .catch(error => {
    alert('Error updating question: ' + error.message);
  });
}

// Options Management Functions
function addOption(questionId) {
  const optionText = prompt('Enter option text:');
  if (!optionText || !optionText.trim()) return;

  fetch('/assessments/<%= @assessment.id %>/add_option', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': '<%= form_authenticity_token %>'
    },
    body: JSON.stringify({
      question_id: questionId,
      option_text: optionText.trim()
    })
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      addOptionToList(questionId, data.option);
      updateOptionCount(questionId);
    } else {
      alert('Error adding option: ' + (data.error || 'Unknown error'));
    }
  })
  .catch(error => {
    alert('Error adding option: ' + error.message);
  });
}

function removeOption(optionId) {
  if (!confirm('Are you sure you want to remove this option?')) return;

  fetch('/assessments/<%= @assessment.id %>/remove_option', {
    method: 'DELETE',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': '<%= form_authenticity_token %>'
    },
    body: JSON.stringify({
      option_id: optionId
    })
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      removeOptionFromList(optionId);
    } else {
      alert('Error removing option: ' + (data.error || 'Unknown error'));
    }
  })
  .catch(error => {
    alert('Error removing option: ' + error.message);
  });
}

function updateOption(optionId, newText) {
  if (!newText.trim()) return;

  fetch('/assessments/<%= @assessment.id %>/update_option', {
    method: 'PATCH',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': '<%= form_authenticity_token %>'
    },
    body: JSON.stringify({
      option_id: optionId,
      option: {
        text: newText.trim()
      }
    })
  })
  .then(response => response.json())
  .then(data => {
    if (!data.success) {
      alert('Error updating option: ' + (data.errors ? data.errors.join(', ') : 'Unknown error'));
      // Reload to revert changes
      location.reload();
    }
  })
  .catch(error => {
    alert('Error updating option: ' + error.message);
    location.reload();
  });
}

// Helper functions for DOM manipulation
function addOptionToList(questionId, option) {
  const optionsList = document.getElementById('options-list-' + questionId);
  const optionDiv = document.createElement('div');
  optionDiv.className = 'flex items-center space-x-2 bg-white p-2 rounded border';
  optionDiv.setAttribute('data-option-id', option.id);
  optionDiv.innerHTML = `
    <span class="text-xs text-gray-500 w-4">${option.order}</span>
    <input type="text"
           value="${option.text}"
           class="flex-1 text-xs border-0 bg-transparent focus:ring-0 p-0"
           onchange="updateOption(${option.id}, this.value)"
           placeholder="Option text">
    <button onclick="removeOption(${option.id})"
            class="text-red-500 hover:text-red-700 p-1">
      <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
      </svg>
    </button>
  `;
  optionsList.appendChild(optionDiv);
}

function removeOptionFromList(optionId) {
  const optionDiv = document.querySelector(`[data-option-id="${optionId}"]`);
  if (optionDiv) {
    const questionId = optionDiv.closest('[id^="options-list-"]').id.split('-')[2];
    optionDiv.remove();
    updateOptionCount(questionId);
  }
}

function updateOptionCount(questionId) {
  const optionsList = document.getElementById('options-list-' + questionId);
  const count = optionsList.children.length;
  const countElement = optionsList.closest('.space-y-2').previousElementSibling;
  if (countElement) {
    countElement.textContent = count + ' options available';
  }
}
</script>
